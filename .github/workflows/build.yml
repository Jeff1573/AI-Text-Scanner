name: Build and Release

# 添加权限配置
permissions:
  contents: write
  actions: read
  id-token: write
  packages: write

on:
  push:
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'build_only'
        type: choice
        options:
          - build_only
          - build_and_release
          - release_only
      force_release:
        description: '强制发布（即使不是标签）'
        required: false
        default: false
        type: boolean

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            package_cmd: npm run package:win
          - os: macos-latest
            platform: mac
            package_cmd: npm run package:mac

    runs-on: ${{ matrix.os }}
    
    # 在手动触发时，根据build_type参数决定是否执行
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'build_only' || github.event.inputs.build_type == 'build_and_release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # 构建应用包 (在推送标签、主分支或手动触发时)
      - name: Package application
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: ${{ matrix.package_cmd }}
        env:
          # GitHub Token for publishing
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 禁用代码签名 (CI环境)
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # # Windows代码签名 (如果有的话)
          # WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          # WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

      # 上传构建产物
      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.platform }}
          path: |
            dist/**/*
            !dist/mac-universal
            !dist/win-unpacked
          retention-days: 7

  # 发布到GitHub Releases (在标签推送或手动触发时)
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'build_and_release') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'release_only' && github.event.inputs.force_release == 'true')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag information and generate changelog
        id: tag_info
        run: |
          # 获取当前标签或版本信息
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 标签推送情况
            tag="${{ github.ref_name }}"
            tagMessage=$(git tag -l --format='%(contents)' "$tag" 2>/dev/null || echo "")
            echo "Using existing tag: $tag"
          else
            # 手动触发情况，使用package.json中的版本号
            if [ -f package.json ]; then
              version=$(node -p "require('./package.json').version" 2>/dev/null || echo "1.0.0")
              tag="v$version"
              tagMessage="Release $tag - Manual Release"
              echo "Creating new tag: $tag"
              
              # 检查标签是否已存在
              if git rev-parse "$tag" >/dev/null 2>&1; then
                echo "Tag $tag already exists"
                tagMessage=$(git tag -l --format='%(contents)' "$tag" 2>/dev/null || echo "Release $tag")
              else
                echo "Creating new tag $tag"
                git config user.name "github-actions[bot]"
                git config user.email "github-actions[bot]@users.noreply.github.com"
                git tag -a "$tag" -m "$tagMessage"
                git push origin "$tag"
              fi
            else
              tag="v1.0.0"
              tagMessage="Release $tag - Manual Release"
            fi
          fi

          if [ -z "$tagMessage" ]; then
            tagMessage="Release $tag"
          fi

          # 获取上一个标签
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            previousTag=$(git describe --tags --abbrev=0 "$tag"^ 2>/dev/null || echo "")
            compareRef="$tag"
          else
            previousTag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            compareRef="${{ github.sha }}"
          fi

          # 生成更新日志
          changelog="## 📋 更新内容\n\n"
          changelog+="$tagMessage\n\n"
          changelog+="## 🔄 代码变更\n\n"

          if [ -n "$previousTag" ] && [ "$previousTag" != "$tag" ]; then
            commits=$(git log --pretty=format:"- %s" "$previousTag..$compareRef" 2>/dev/null || echo "")
            if [ -n "$commits" ]; then
              changelog+="$commits"
            else
              changelog+="- 无显著变更"
            fi
            changelog+="\n\n## 📊 完整变更日志\n\n[查看完整变更记录](https://github.com/${{ github.repository }}/compare/$previousTag..$compareRef)"
          else
            changelog+="- 初始版本发布\n\n"
          fi

          # 将内容写入文件
          echo -e "$changelog" > release_notes.md
          echo "TAG_NAME=$tag" >> $GITHUB_OUTPUT
          echo "PREVIOUS_TAG=$previousTag" >> $GITHUB_OUTPUT

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-win
          path: artifacts/windows/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-mac
          path: artifacts/macos/

      - name: Debug information
        run: |
          echo "Debug Information:"
          echo "TAG_NAME: ${{ steps.tag_info.outputs.TAG_NAME }}"
          echo "PREVIOUS_TAG: ${{ steps.tag_info.outputs.PREVIOUS_TAG }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Ref Name: ${{ github.ref_name }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "\nRelease Notes Content:"
          cat release_notes.md
          echo "\nArtifacts Directory Structure:"
          ls -la artifacts/ || echo "No artifacts directory"
          echo "\nWindows artifacts:"
          find artifacts/windows/ -type f -name "*.exe" | head -10
          find artifacts/windows/ -type f -name "*.blockmap" | head -10
          find artifacts/windows/ -type f -name "*.yml" | head -10
          echo "\nSpecific exe files found:"
          find artifacts/windows/ -name "*Setup*.exe" || echo "No Setup exe files found"
          find artifacts/windows/ -name "*.exe" | grep -v "win-unpacked" || echo "No exe files (excluding unpacked)"
          echo "\nmacOS artifacts:"
          find artifacts/macos/ -type f -name "*.dmg" | head -10
          find artifacts/macos/ -type f -name "*.blockmap" | head -10
          find artifacts/macos/ -type f -name "*.yml" | head -10

      - name: Create Release with changelog
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_info.outputs.TAG_NAME }}
          name: ${{ steps.tag_info.outputs.TAG_NAME }}
          files: |
            artifacts/windows/*Setup*.exe
            artifacts/windows/*.blockmap
            artifacts/windows/latest.yml
            artifacts/macos/*.dmg
            artifacts/macos/*.zip
            artifacts/macos/*.blockmap
            artifacts/macos/latest-mac.yml
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on release
        run: |
          echo "🎉 Release created successfully!"
          echo "Download links are available in the release section."
